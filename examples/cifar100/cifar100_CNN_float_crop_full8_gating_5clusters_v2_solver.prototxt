# reduce learning rate after 30 epochs (15000 iters) by factor 0f 10
# then another factor of 10 after 20 more epochs (10000 iters)

# The training protocol buffer definition
train_net: "cifar100_CNN_float_crop_full8_gating_5clusters_v2_train.prototxt"
# The testing protocol buffer definition
test_net: "cifar100_CNN_float_crop_full8_gating_5clusters_v2_test.prototxt"
# test_iter specifies how many forward passes the test should carry out.
# In the case of CIFAR10, we have test batch size 200 and 50 test iterations,
# covering the full 10,000 testing images.
test_iter: 100
# Carry out testing every 1000 training iterations.
test_interval: 1000
# The base learning rate, momentum and the weight decay of the network.
base_lr: 0.0005
momentum: 0.9
weight_decay: 0.001
# The learning rate policy
lr_policy: "fixed"
# Display every 200 iterations
display: 200
# The maximum number of iterations
max_iter: 5000
# snapshot intermediate results
snapshot: 1000
snapshot_prefix: "cifar100_CNN_float_crop_full8_gating_5clusters_v2_finetune_from_CNN_float_crop_full8"
# solver mode: CPU or GPU
# Note: there seems to be a bug with CPU computation in the pooling layers,
# and changing to solver_mode: CPU may result in NaNs on this example.
# If you want to train a variant of this architecture on the
# CPU, try changing the pooling regions from WITHIN_CHANNEL to ACROSS_CHANNELS
# in both cifar_full_train.prototxt and cifar_full_test.prototxt.
solver_mode: GPU
device_id: 0
